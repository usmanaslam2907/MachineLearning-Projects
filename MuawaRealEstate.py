# -*- coding: utf-8 -*-
"""RealEstatePricePredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W52qoFOjPqVcuvuOs6wwF4kOwv9R2U4z

#***Muawa Real Estate - Price Predictor***
"""

import pandas as pd

"""#***Load and Prepare Data***"""

housing=pd.read_csv("data.csv")
housing.head()

"""#***Housing Data Summary***"""

housing.info()

housing["CHAS"].value_counts()

housing.describe()

"""#***Strategies for Handling Missing Data***
***There have three Options to handle missing values***

1: Get rid of the missing data points.



2: Get rid of the whole attribute.



3: Set the value to some value(0,mean or median)
"""

# Option 1
a=housing.dropna(subset=["RM"])
a.shape

# Option 2
housing.drop("RM",axis=1)

# Option 3
#Changes will not be made to the original housing data until we use inplace=True.
median=housing["RM"].median()
housing["RM"].fillna(median)

"""#***Fit Imputer to Housing Data***"""

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(strategy="median")
imputer.fit(housing)

imputer.statistics_

# See imputer is work or not
x=imputer.transform(housing)
housing=pd.DataFrame(x,columns=housing.columns)
housing.describe()

"""#***Housing Data Visualization***"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
housing.hist(bins=50,figsize=(14,12))
plt.show()

"""#***Looking for Correlation***"""

#MEDV stands for Median Value of Owner-Occupied Homes ....Target Attribute
corr_matrix=housing.corr()
corr_matrix['MEDV'].sort_values(ascending=False)

from pandas.plotting import scatter_matrix
attributes=["MEDV","RM","ZN","LSTAT"]
scatter_matrix(housing[attributes],figsize=(14,12))
plt.show()

# Let's examine the correlation between the variable RM and the target variable MEDV.#
housing.plot(kind="scatter",x="RM",y="MEDV",alpha=0.8)

"""#***Trying out Attribute Combinations***
Attribute combinations involve creating new features by combining existing ones, enhancing the model's ability to capture complex relationships in the data.
"""

housing["TAXRM"]=housing['TAX']/housing['RM']
housing["TAXRM"]

housing.head()

#"Examine the correlation between the variable TAXRM and the target variable MEDV."
housing.plot(kind="scatter",x="TAXRM",y="MEDV",alpha=0.8)

"""## ***Train-Test Splitting (User-defined function)***"""

# User defined function
import numpy as np
def split_train_test(data,test_ratio):
  np.random.seed(42)
  shuffled=np.random.permutation(len(data))
  test_set_size=int(len(data)*test_ratio)
  test_indices=shuffled[:test_set_size]
  train_indices=shuffled[test_set_size:]
  return data.iloc[train_indices],data.iloc[test_indices]

train_set,test_set=split_train_test(housing,0.2)
print(f"Rows in Train Set: {len(train_set)}\nRows in Test Set: {len(test_set)}\n")

"""#***Train-Test Splitting( 2nd Method)***"""

from pandas.core.common import random_state
from sklearn.model_selection import train_test_split
train_set,test_set=train_test_split(housing,test_size=0.2,random_state=42)
print(f"Rows in Train Set: {len(train_set)}\nRows in Test Set: {len(test_set)}\n")

"""##***StratifiedShuffleSplit***
StratifiedShuffleSplit maintains class distribution in train-test splits, crucial for balanced and representative evaluations, especially in imbalanced datasets.
"""

from sklearn.model_selection import StratifiedShuffleSplit
split=StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)
for train_index,test_index in split.split(housing,housing['CHAS']):
  strat_train_set=housing.loc[train_index]
  strat_test_set=housing.loc[test_index]

  #Train Data
  housing_tr=strat_train_set.copy()
   #Test Data
  housing_test=strat_test_set.copy()

"""#***Data Segmentation: Housing Features and Labels***"""

Housing_Features=housing_tr.drop("MEDV",axis=1)
Housing_Label=housing_tr["MEDV"].copy()

"""#***Scikit-Learn Design***
***Primally, Three types of objects***


***1: Estimators***- It estimates some parameters based on dataset
 e.g imputer and it has a fit method - Fit the datasets and calculates parameters.

***2: Transformers*** - Transform method takes input and return output based on learning from fit().It also has a convenience function called fit_transform() which fits and then transforms.





***3: Predictores*** - LinearRegression model is an example of predictor. fit() and predict() are two common functions.It also gives score() function which will evaluate the predictions.

#***Feature Scaling***
***Primarily,Two types of feature scaling methods***


***1: Min-Max Scaling (Normalization)***


   (value-min)/(max-min)

Sklearn providees a class called MinMaxScaler for this



***2: Standardization***

(value-mean)/std



sklearn provides a class called Standard Scaler for this

#***Creating a Pipeline***
We use a pipeline in machine learning to streamline and automate the process of data preprocessing and model training. A pipeline allows you to sequence multiple data processing steps and model training into a single entity, which offers several benefits.



***When we want to automate this process, we use a pipeline.***
"""

from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

# add as many as you want in your pipeline
my_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy="median")),
    ('std_scaler', StandardScaler()),
])

housing_features=my_pipeline.fit_transform(Housing_Features)
housing_features

"""#***Selecting a desired model for Muawa Real Estate***
#***Linear Regression Model***
"""

from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(housing_features,Housing_Label)

some_data=Housing_Features.iloc[:5]
some_labels=Housing_Label.iloc[:5]

prepared_data=my_pipeline.transform(some_data)
model.predict(prepared_data)

# Results that are most similar indicate good predictions.
some_labels

"""#***Evaluating the Model***"""

from sklearn.metrics import mean_squared_error
housing_predictions=model.predict(housing_features)
lin_mse=mean_squared_error(Housing_Label,housing_predictions)
lin_rmse=np.sqrt(lin_mse)

print("Root mean Square Error:",lin_rmse)

"""#***Decision Tree Regressor Model***"""

from sklearn.tree import DecisionTreeRegressor
model1=DecisionTreeRegressor()
model1.fit(housing_features,Housing_Label)

"""***A root mean square error of 0.0 may indicate overfitting of the data.***"""

housing_prediction=model1.predict(housing_features)
mse=mean_squared_error(Housing_Label,housing_prediction)
rmse=np.sqrt(mse)
print("Root mean Square Error:",rmse)

"""***If overfitting occurs, we can use cross-validation***
#***Using Better Evaluation Technique - Cross Validation***
"""

from sklearn.model_selection import cross_val_score
scores=cross_val_score(model1,housing_features,Housing_Label,scoring="neg_mean_squared_error",cv=10)
rmse_score=np.sqrt(-scores)

rmse_score

"""***Create a function to observe the scores of each model.***"""

def print_scores(scores):
  print("Scores: ",scores)
  print("Mean: ",scores.mean())
  print("Standard Deviation: ",scores.std())

"""***Linear Regression***"""

print("Linear Regression")
print_scores(lin_rmse)

"""***Decision Tree***"""

print("Decision Tree ")
print_scores(rmse_score)

from joblib import dump,load
dump(model1,'RealEstate.joblib')

"""#***Model Testing***"""

Housing_F = housing_test.drop("MEDV", axis=1)
Housing_L = housing_test["MEDV"].copy()

housing_fe = my_pipeline.fit_transform(Housing_F)
# Make predictions using the model
final_predictions = model1.predict(housing_fe)
# Calculate the final mean squared error and root mean squared error
final_mse = mean_squared_error(Housing_L, final_predictions)
final_rmse = np.sqrt(final_mse)

print(f"Final RMSE: {final_rmse:.2f}")

"""#***Application Phase***"""

3#Take input from Users and predict Price


CRIM = input("\nPlease enter CRIM: ").strip()
ZN = input("\nPlease enter ZN: ").strip()
INDUS = input("\nPlease enter INDUS: ").strip()
CHAS = input("\nPlease enter CHAS: ").strip()
NOX = input("\nPlease enter NOX: ").strip()
RM = input("\nPlease enter RM : ").strip()
AGE = input("\nPlease enter AGE: ").strip()
DIS = input("\nPlease enter DIS: ").strip()
RAD = input("\nPlease enter RAD: ").strip()
TAX = input("\nPlease enter TAX: ").strip()
PTRATID = input("\nPlease enter PTRATID: ").strip()
B = input("\nPlease enter B: ").strip()
LSTAT = input("\nPlease enter LSTAT: ").strip()
TAXRM = input("\nPlease enter TAXRM: ").strip()

# Create a DataFrame from user input
user_input = pd.DataFrame({
    'CRIM': [CRIM],
    'ZN': [ZN],
    'INDUS': [INDUS],
    'CHAS': [CHAS],
    'NOX': [NOX],
    'RM': [RM],
    'AGE': [AGE],
    'DIS': [DIS],
    'RAD': [RAD],
    'TAX': [TAX],
    'PTRATID': [PTRATID],
    'B': [RAD],
    'LSTAT': [LSTAT],
    'TAXRM': [TAXRM]
})

print("\n\nUser Input Feature Vector:")
print("==========================\n")
print(user_input)

user = my_pipeline.transform(user_input)

# Make predictions using the model
value = model1.predict(user)

from prettytable import PrettyTable
pretty_table = PrettyTable()
pretty_table.add_column("       ** Median Value(MEDV) **       ",[value])
print(pretty_table)

"""#***Thank you for reviewing this document.***"""