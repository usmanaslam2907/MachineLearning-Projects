# -*- coding: utf-8 -*-
"""2023GoldPricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IANqTBGHXIIRnXrwNGb80jEc0CP32OTU

***Import Libraries***
"""

import numpy as np
import pandas as pd
from  sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""***Load Data and Prepare***"""

data=pd.read_csv("gold.csv")

data.head()

"""***Data Summary***"""

data.info()

"""***Data Analysis***"""

data.describe()

data.shape

data.isnull().sum()

correlations=data.corr()

plt.figure(figsize=(6,6))
sns.heatmap(correlations,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

sns.displot(data['GLD'],color='green')

"""***Train Test Split Data***"""

X=data.drop(['Date','GLD'],axis=1)
Y=data['GLD']

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

"""***Model Training***"""

regressor=RandomForestRegressor()
regressor.fit(X_train,Y_train)

#tested result
result=regressor.predict(X_test)
result=pd.DataFrame(result)
result.head()

score=metrics.r2_score(Y_test,result)
print("R square Error: ",score)

"""***Application Phase***"""

SPX=input("Enter SPX: ").strip()
EUR=input("Enter EUR/USD: ").strip()
USO=input("Enter USO: ").strip()
SLV=input("Enter SLV: ").strip()

data = {'SPX': [SPX],'USO': [USO], 'SLV': [SLV], 'EUR/USD': [EUR], }
df = pd.DataFrame(data)

print("User Input DataFrame:")
print(df)

predict=regressor.predict(df)
print("The Price of GLD is: ",predict)