# -*- coding: utf-8 -*-
"""Rock vs Mine

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rXPMWmo6Lrhi2L5kd5mGG2lsjYCfnuc3

Importing the dependcies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

#Loading the datasets to a Pandas DataFrame
sonar_data=pd.read_csv('/content/sonar data.csv',header=None)

sonar_data.head()

sonar_data.shape

sonar_data.describe()

sonar_data[60].value_counts()

sonar_data.groupby(60).mean()

"""Separting Features and Labels"""

X_features=sonar_data.drop(columns=60,axis=1)
Y_labels=sonar_data[60]

print(X_features)
print(Y_labels)

"""Training and Test Data"""

X_features_train,X_features_test,Y_labels_train,Y_labels_test=train_test_split(X_features,Y_labels,test_size=0.1,stratify=Y_labels,random_state=1)

print(X_features.shape,X_features_train.shape,X_features_test.shape)

"""Model Training by Logistic Regression"""

model = LogisticRegression()

"""Training the model with training datasets"""

model.fit(X_features_train,Y_labels_train)

"""Model Evalution"""

# find accuracy of model on training data

X_features_prediction=model.predict(X_features_train)
training_data_accuracy=accuracy_score(X_features_prediction,Y_labels_train)

print("Accuracy on training data" ,training_data_accuracy*100)

"""Accuracy on test data"""

test_prediction=model.predict(X_features_test)
test_accuracy=accuracy_score(test_prediction,Y_labels_test)

print("Accuracy on test data:",test_accuracy*100)



"""Making a predictive system"""

from google.colab import drive
drive.mount('/content/drive')

input_data=(0.0228,0.0106,0.0130,0.9842,0.1117,0.1506,0.8676,0.0997,0.1428,0.2227,0.2621,0.3109,0.2859,0.3316,0.3755,0.4499,0.4765,0.6254,0.7304,0.8702,0.9349,0.9614,0.9126,0.9443,1.0000,0.9455,0.8815,0.7520,0.7068,0.5986,0.3857,0.2510,0.2162,0.0968,0.1323,0.1344,0.2250,0.3244,0.3939,0.3806,0.3258,0.3654,0.2983,0.1779,0.1535,0.1199,0.0959,0.0765,0.0649,0.0313,0.0185,0.0098,0.0178,0.0077,0.0074,0.0095,0.0055,0.0045,0.0063,0.0039)
# converting into numpy array
#changing input data into numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the np array as we are predicting for one instances
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction_result=model.predict(input_data_reshaped)
# print(prediction_result)
if prediction_result[0]=='R':
  print("The Object is a Rock")
else:
  print("The Object is Mine")

